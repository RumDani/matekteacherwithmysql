import streamlit as st
from PIL import Image
import io
import os
import requests
import google.generativeai as genai
from dotenv import load_dotenv
import pathlib
import textwrap
from IPython.display import display
from google_auth import get_logged_in_user_email, show_login_button
from st_paywall import add_auth
import mysql.connector
import pandas as pd

st.set_page_config(
    page_title="Math Teacher",
    page_icon="ü§ñ"
)
st.title("ü§ñ AI Matek Tan√°r")

login_button_text="Login with Google"
login_button_color="#FD504D"
login_sidebar=True
user_email = get_logged_in_user_email()

if not user_email:
    show_login_button(
        text=login_button_text, color=login_button_color, sidebar=login_sidebar
    )
    st.stop()

st.session_state.user_subscribed = True

if st.sidebar.button("Logout", type="primary"):
    del st.session_state.email
    del st.session_state.user_subscribed
    st.rerun()

st.write("Bejelentkezt√©l")
st.write("Email c√≠med: " + str(st.session_state.email))

load_dotenv()
api_key = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=api_key)

# Adatb√°zis kapcsolat
def get_db_connection():
    connection = mysql.connector.connect(
        host='db4free.net',
        user='dadani2',
        password='dadanivok',
        database='streamlit2'
    )
    return connection

# Adatb√°zis kapcsolat l√©trehoz√°sa
connection = get_db_connection()

# Cursor l√©trehoz√°sa
cursor = connection.cursor()

# Lek√©rdez√©s v√©grehajt√°sa
cursor.execute("SELECT * FROM tablename1")
data = cursor.fetchall()

# DataFrame l√©trehoz√°sa
df = pd.DataFrame(data, columns=cursor.column_names)

# Ellen≈ërizz√ºk, hogy van-e m√°r sor a t√°bl√°ban
if len(df) == 0:
    # Ha nincs, hozz√°adjuk az alap√©rtelmezett √©rt√©kekkel
    cursor.execute("INSERT INTO tablename1 (gombnyomas) VALUES (0)")
    connection.commit()

    # √öjra lek√©rdezz√ºk az adatokat √©s friss√≠tj√ºk a DataFrame-et
    cursor.execute("SELECT * FROM tablename1")
    data = cursor.fetchall()
    df = pd.DataFrame(data, columns=cursor.column_names)

def call_gemini(image):
    model = genai.GenerativeModel(st.secrets["MODEL"])
    model_prompt = st.secrets["PROMPT"]
    with st.spinner("Dolgozok a megold√°son..."):
        response = model.generate_content([model_prompt, image], stream=True)
        response.resolve()
    response_text = response.text
    st.subheader("Megold√°s")
    st.write(response_text)

    # N√∂velj√ºk a sz√°ml√°l√≥t az adatb√°zisban
    cursor.execute("UPDATE tablename1 SET gombnyomas = gombnyomas + 1")
    connection.commit()

    # √öjra lek√©rdezz√ºk az adatokat √©s friss√≠tj√ºk a DataFrame-et
    cursor.execute("SELECT * FROM tablename1")
    data = cursor.fetchall()
    df = pd.DataFrame(data, columns=cursor.column_names)

    # Megjelen√≠tj√ºk a friss√≠tett adatokat
    st.dataframe(df)

def main():
    st.caption("üöÄ T√∂lts fel egy k√©pet a matematika feladatr√≥l!")

    uploaded_file = st.file_uploader("Feladat felt√∂lt√©se", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        image_display_width = 300
        st.image(image, caption='Feladat', use_column_width=False, width=image_display_width)
        
        if st.button('Megold√°s'):
            call_gemini(image)
        else:
            st.write('Kattints a "Megold√°s" gombra!')

if __name__ == "__main__":
    main()

# Cursor √©s kapcsolat bez√°r√°sa
cursor.close()
connection.close()
